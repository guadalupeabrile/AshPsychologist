{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nvar tinyEmitter = {\n  exports: {}\n};\nfunction E() {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n    return this;\n  },\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener() {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    }\n    listener._ = callback;\n    return this.on(name, listener, ctx);\n  },\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n    return this;\n  },\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    liveEvents.length ? e[name] = liveEvents : delete e[name];\n    return this;\n  }\n};\ntinyEmitter.exports = E;\ntinyEmitter.exports.TinyEmitter = E;\nvar TinyEmitter = tinyEmitter.exports;\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches || proto.matchesSelector || proto.webkitMatchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector;\nvar matchesSelector = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\nvar throttleit = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle(func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n  return function throttled() {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID) if (delta >= wait) call();else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n  function call() {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\nvar arrayParallel = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context;\n      context = null;\n    } else {\n      callback = noop;\n    }\n  }\n  var pending = fns && fns.length;\n  if (!pending) return callback(null, []);\n  var finished = false;\n  var results = new Array(pending);\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i));\n  } : function (fn, i) {\n    fn(maybeDone(i));\n  });\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n      if (err) {\n        callback(err, results);\n        finished = true;\n        return;\n      }\n      results[i] = result;\n      if (! --pending) callback(null, results);\n    };\n  }\n};\nfunction noop() {}\n\n/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nfunction getNumber(value) {\n  return parseFloat(value) || 0;\n}\nvar Point = /*#__PURE__*/function () {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n\n  _createClass(Point, null, [{\n    key: \"equals\",\n    value: function equals(a, b) {\n      return a.x === b.x && a.y === b.y;\n    }\n  }]);\n  return Point;\n}();\nvar Rect = /*#__PURE__*/function () {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  function Rect(x, y, w, h, id) {\n    _classCallCheck(this, Rect);\n    this.id = id;\n    /** @type {number} */\n\n    this.left = x;\n    /** @type {number} */\n\n    this.top = y;\n    /** @type {number} */\n\n    this.width = w;\n    /** @type {number} */\n\n    this.height = h;\n  }\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n\n  _createClass(Rect, null, [{\n    key: \"intersects\",\n    value: function intersects(a, b) {\n      return a.left < b.left + b.width && b.left < a.left + a.width && a.top < b.top + b.height && b.top < a.top + a.height;\n    }\n  }]);\n  return Rect;\n}();\nvar Classes = {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden'\n};\nvar id$1 = 0;\nvar ShuffleItem = /*#__PURE__*/function () {\n  function ShuffleItem(element, isRTL) {\n    _classCallCheck(this, ShuffleItem);\n    id$1 += 1;\n    this.id = id$1;\n    this.element = element;\n    /**\n     * Set correct direction of item\n     */\n\n    this.isRTL = isRTL;\n    /**\n     * Used to separate items for layout and shrink.\n     */\n\n    this.isVisible = true;\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n\n    this.isHidden = false;\n  }\n  _createClass(ShuffleItem, [{\n    key: \"show\",\n    value: function show() {\n      this.isVisible = true;\n      this.element.classList.remove(Classes.HIDDEN);\n      this.element.classList.add(Classes.VISIBLE);\n      this.element.removeAttribute('aria-hidden');\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.isVisible = false;\n      this.element.classList.remove(Classes.VISIBLE);\n      this.element.classList.add(Classes.HIDDEN);\n      this.element.setAttribute('aria-hidden', true);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n      this.applyCss(ShuffleItem.Css.INITIAL);\n      this.applyCss(this.isRTL ? ShuffleItem.Css.DIRECTION.rtl : ShuffleItem.Css.DIRECTION.ltr);\n      this.scale = ShuffleItem.Scale.VISIBLE;\n      this.point = new Point();\n    }\n  }, {\n    key: \"addClasses\",\n    value: function addClasses(classes) {\n      var _this = this;\n      classes.forEach(function (className) {\n        _this.element.classList.add(className);\n      });\n    }\n  }, {\n    key: \"removeClasses\",\n    value: function removeClasses(classes) {\n      var _this2 = this;\n      classes.forEach(function (className) {\n        _this2.element.classList.remove(className);\n      });\n    }\n  }, {\n    key: \"applyCss\",\n    value: function applyCss(obj) {\n      var _this3 = this;\n      Object.keys(obj).forEach(function (key) {\n        _this3.element.style[key] = obj[key];\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.removeClasses([Classes.HIDDEN, Classes.VISIBLE, Classes.SHUFFLE_ITEM]);\n      this.element.removeAttribute('style');\n      this.element = null;\n    }\n  }]);\n  return ShuffleItem;\n}();\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    visibility: 'visible',\n    willChange: 'transform'\n  },\n  DIRECTION: {\n    ltr: {\n      left: 0\n    },\n    rtl: {\n      right: 0\n    }\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible'\n    },\n    after: {\n      transitionDelay: ''\n    }\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: ''\n    }\n  }\n};\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001\n};\nvar value = null;\nvar testComputedSize = function () {\n  if (value !== null) {\n    return value;\n  }\n  var element = document.body || document.documentElement;\n  var e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n  var _window$getComputedSt = window.getComputedStyle(e, null),\n    width = _window$getComputedSt.width; // Fix for issue #314\n\n  value = Math.round(getNumber(width)) === 10;\n  element.removeChild(e);\n  return value;\n};\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\n\nfunction getNumberStyle(element, style) {\n  var styles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.getComputedStyle(element, null);\n  var value = getNumber(styles[style]); // Support IE<=11 and W3C spec.\n\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft) + getNumber(styles.paddingRight) + getNumber(styles.borderLeftWidth) + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop) + getNumber(styles.paddingBottom) + getNumber(styles.borderTopWidth) + getNumber(styles.borderBottomWidth);\n  }\n  return value;\n}\n\n/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  var n = array.length;\n  while (n) {\n    n -= 1;\n    var i = Math.floor(Math.random() * (n + 1));\n    var temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n  return array;\n}\nvar defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n  // Sorting function\n  by: null,\n  // Custom sort function\n  compare: null,\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element'\n};\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\n\nfunction sorter(arr, options) {\n  // eslint-disable-next-line prefer-object-spread\n  var opts = Object.assign({}, defaults, options);\n  var original = Array.from(arr);\n  var revert = false;\n  if (!arr.length) {\n    return [];\n  }\n  if (opts.randomize) {\n    return randomize(arr);\n  } // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n\n  if (typeof opts.by === 'function') {\n    arr.sort(function (a, b) {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n      var valA = opts.by(a[opts.key]);\n      var valB = opts.by(b[opts.key]); // If both values are undefined, use the DOM order\n\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  } // Revert to the original array if necessary\n\n  if (revert) {\n    return original;\n  }\n  if (opts.reverse) {\n    arr.reverse();\n  }\n  return arr;\n}\nvar transitions = {};\nvar eventName = 'transitionend';\nvar count = 0;\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\nfunction cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n  return false;\n}\nfunction onTransitionEnd(element, callback) {\n  var id = uniqueId();\n  var listener = function listener(evt) {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n  element.addEventListener(eventName, listener);\n  transitions[id] = {\n    element: element,\n    listener: listener\n  };\n  return id;\n}\nfunction arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\nfunction arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\n\nfunction getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  var columnSpan = itemWidth / columnWidth; // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  } // Ensure the column span is not more than the amount of columns in the whole layout.\n\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\n\nfunction getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  } // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n\n  var available = []; // For how many possible positions for this item there are.\n\n  for (var i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n  return available;\n}\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\n\nfunction getShortColumn(positions, buffer) {\n  var minPosition = arrayMin(positions);\n  for (var i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n  return 0;\n}\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\n\nfunction getItemPosition(_ref) {\n  var itemSize = _ref.itemSize,\n    positions = _ref.positions,\n    gridSize = _ref.gridSize,\n    total = _ref.total,\n    threshold = _ref.threshold,\n    buffer = _ref.buffer;\n  var span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  var setY = getAvailablePositions(positions, span, total);\n  var shortColumnIndex = getShortColumn(setY, buffer); // Position the item\n\n  var point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]); // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n\n  var setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (var i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n  return point;\n}\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\n\nfunction getCenteredPositions(itemRects, containerWidth) {\n  var rowMap = {}; // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n\n  itemRects.forEach(function (itemRect) {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  }); // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n\n  var rects = [];\n  var rows = [];\n  var centeredRows = [];\n  Object.keys(rowMap).forEach(function (key) {\n    var itemRects = rowMap[key];\n    rows.push(itemRects);\n    var lastItem = itemRects[itemRects.length - 1];\n    var end = lastItem.left + lastItem.width;\n    var offset = Math.round((containerWidth - end) / 2);\n    var finalRects = itemRects;\n    var canMove = false;\n    if (offset > 0) {\n      var newRects = [];\n      canMove = itemRects.every(function (r) {\n        var newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id); // Check all current rects to make sure none overlap.\n\n        var noOverlap = !rects.some(function (r) {\n          return Rect.intersects(newRect, r);\n        });\n        newRects.push(newRect);\n        return noOverlap;\n      }); // If none of the rectangles overlapped, the whole group can be centered.\n\n      if (canMove) {\n        finalRects = newRects;\n      }\n    } // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n\n    if (!canMove) {\n      var intersectingRect;\n      var hasOverlap = itemRects.some(function (itemRect) {\n        return rects.some(function (r) {\n          var intersects = Rect.intersects(itemRect, r);\n          if (intersects) {\n            intersectingRect = r;\n          }\n          return intersects;\n        });\n      }); // If there is any overlap, replace the overlapping row with the original.\n\n      if (hasOverlap) {\n        var rowIndex = centeredRows.findIndex(function (items) {\n          return items.includes(intersectingRect);\n        });\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  }); // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n  .sort(function (a, b) {\n    return a.id - b.id;\n  }).map(function (itemRect) {\n    return new Point(itemRect.left, itemRect.top);\n  });\n}\n\n/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nfunction hyphenate(str) {\n  return str.replace(/([A-Z])/g, function (str, m1) {\n    return \"-\".concat(m1.toLowerCase());\n  });\n}\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n} // Used for unique instance variables\n\nvar id = 0;\nvar Shuffle = /*#__PURE__*/function (_TinyEmitter) {\n  _inherits(Shuffle, _TinyEmitter);\n  var _super = _createSuper(Shuffle);\n\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  function Shuffle(element) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Shuffle);\n    _this = _super.call(this); // eslint-disable-next-line prefer-object-spread\n\n    _this.options = Object.assign({}, Shuffle.options, options); // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n\n    if (_this.options.delimeter) {\n      _this.options.delimiter = _this.options.delimeter;\n    }\n    _this.lastSort = {};\n    _this.group = Shuffle.ALL_ITEMS;\n    _this.lastFilter = Shuffle.ALL_ITEMS;\n    _this.isEnabled = true;\n    _this.isDestroyed = false;\n    _this.isInitialized = false;\n    _this._transitions = [];\n    _this.isTransitioning = false;\n    _this._queue = [];\n    var el = _this._getElementOption(element);\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n    _this.element = el;\n    _this.id = 'shuffle_' + id;\n    id += 1;\n    _this._init();\n    _this.isInitialized = true;\n    return _this;\n  }\n  _createClass(Shuffle, [{\n    key: \"_init\",\n    value: function _init() {\n      this.items = this._getItems();\n      this.sortedItems = this.items;\n      this.options.sizer = this._getElementOption(this.options.sizer); // Add class and invalidate styles\n\n      this.element.classList.add(Shuffle.Classes.BASE); // Set initial css for each item\n\n      this._initItems(this.items); // Bind resize events\n\n      this._onResize = this._getResizeFunction();\n      window.addEventListener('resize', this._onResize); // If the page has not already emitted the `load` event, call layout on load.\n      // This avoids layout issues caused by images and fonts loading after the\n      // instance has been initialized.\n\n      if (document.readyState !== 'complete') {\n        var layout = this.layout.bind(this);\n        window.addEventListener('load', function onLoad() {\n          window.removeEventListener('load', onLoad);\n          layout();\n        });\n      } // Get container css all in one request. Causes reflow\n\n      var containerCss = window.getComputedStyle(this.element, null);\n      var containerWidth = Shuffle.getSize(this.element).width; // Add styles to the container if it doesn't have them.\n\n      this._validateStyles(containerCss); // We already got the container's width above, no need to cause another\n      // reflow getting it again... Calculate the number of columns there will be\n\n      this._setColumns(containerWidth); // Kick off!\n\n      this.filter(this.options.group, this.options.initialSort); // The shuffle items haven't had transitions set on them yet so the user\n      // doesn't see the first layout. Set them now that the first layout is done.\n      // First, however, a synchronous layout must be caused for the previous\n      // styles to be applied without transitions.\n\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n      this.setItemTransitions(this.items);\n      this.element.style.transition = \"height \".concat(this.options.speed, \"ms \").concat(this.options.easing);\n    }\n    /**\n     * Returns a throttled and proxied function for the resize handler.\n     * @return {function}\n     * @private\n     */\n  }, {\n    key: \"_getResizeFunction\",\n    value: function _getResizeFunction() {\n      var resizeFunction = this._handleResize.bind(this);\n      return this.options.throttle ? this.options.throttle(resizeFunction, this.options.throttleTime) : resizeFunction;\n    }\n    /**\n     * Retrieve an element from an option.\n     * @param {string|jQuery|Element} option The option to check.\n     * @return {?Element} The plain element or null.\n     * @private\n     */\n  }, {\n    key: \"_getElementOption\",\n    value: function _getElementOption(option) {\n      // If column width is a string, treat is as a selector and search for the\n      // sizer element within the outermost container\n      if (typeof option === 'string') {\n        return this.element.querySelector(option);\n      } // Check for an element\n\n      if (option && option.nodeType && option.nodeType === 1) {\n        return option;\n      } // Check for jQuery object\n\n      if (option && option.jquery) {\n        return option[0];\n      }\n      return null;\n    }\n    /**\n     * Ensures the shuffle container has the css styles it needs applied to it.\n     * @param {Object} styles Key value pairs for position and overflow.\n     * @private\n     */\n  }, {\n    key: \"_validateStyles\",\n    value: function _validateStyles(styles) {\n      // Position cannot be static.\n      if (styles.position === 'static') {\n        this.element.style.position = 'relative';\n      } // Overflow has to be hidden.\n\n      if (styles.overflow !== 'hidden') {\n        this.element.style.overflow = 'hidden';\n      }\n    }\n    /**\n     * Filter the elements by a category.\n     * @param {string|string[]|function(Element):boolean} [category] Category to\n     *     filter by. If it's given, the last category will be used to filter the items.\n     * @param {Array} [collection] Optionally filter a collection. Defaults to\n     *     all the items.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n  }, {\n    key: \"_filter\",\n    value: function _filter() {\n      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastFilter;\n      var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.items;\n      var set = this._getFilteredSets(category, collection); // Individually add/remove hidden/visible classes\n\n      this._toggleFilterClasses(set); // Save the last filter in case elements are appended.\n\n      this.lastFilter = category; // This is saved mainly because providing a filter function (like searching)\n      // will overwrite the `lastFilter` property every time its called.\n\n      if (typeof category === 'string') {\n        this.group = category;\n      }\n      return set;\n    }\n    /**\n     * Returns an object containing the visible and hidden elements.\n     * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n     * @param {ShuffleItem[]} items A collection of items to filter.\n     * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n     * @private\n     */\n  }, {\n    key: \"_getFilteredSets\",\n    value: function _getFilteredSets(category, items) {\n      var _this2 = this;\n      var visible = [];\n      var hidden = []; // category === 'all', add visible class to everything\n\n      if (category === Shuffle.ALL_ITEMS) {\n        visible = items; // Loop through each item and use provided function to determine\n        // whether to hide it or not.\n      } else {\n        items.forEach(function (item) {\n          if (_this2._doesPassFilter(category, item.element)) {\n            visible.push(item);\n          } else {\n            hidden.push(item);\n          }\n        });\n      }\n      return {\n        visible: visible,\n        hidden: hidden\n      };\n    }\n    /**\n     * Test an item to see if it passes a category.\n     * @param {string|string[]|function():boolean} category Category or function to filter by.\n     * @param {Element} element An element to test.\n     * @return {boolean} Whether it passes the category/filter.\n     * @private\n     */\n  }, {\n    key: \"_doesPassFilter\",\n    value: function _doesPassFilter(category, element) {\n      if (typeof category === 'function') {\n        return category.call(element, element, this);\n      } // Check each element's data-groups attribute against the given category.\n\n      var attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n      var keys = this.options.delimiter ? attr.split(this.options.delimiter) : JSON.parse(attr);\n      function testCategory(category) {\n        return keys.includes(category);\n      }\n      if (Array.isArray(category)) {\n        if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n          return category.some(testCategory);\n        }\n        return category.every(testCategory);\n      }\n      return keys.includes(category);\n    }\n    /**\n     * Toggles the visible and hidden class names.\n     * @param {{visible, hidden}} Object with visible and hidden arrays.\n     * @private\n     */\n  }, {\n    key: \"_toggleFilterClasses\",\n    value: function _toggleFilterClasses(_ref) {\n      var visible = _ref.visible,\n        hidden = _ref.hidden;\n      visible.forEach(function (item) {\n        item.show();\n      });\n      hidden.forEach(function (item) {\n        item.hide();\n      });\n    }\n    /**\n     * Set the initial css for each item\n     * @param {ShuffleItem[]} items Set to initialize.\n     * @private\n     */\n  }, {\n    key: \"_initItems\",\n    value: function _initItems(items) {\n      items.forEach(function (item) {\n        item.init();\n      });\n    }\n    /**\n     * Remove element reference and styles.\n     * @param {ShuffleItem[]} items Set to dispose.\n     * @private\n     */\n  }, {\n    key: \"_disposeItems\",\n    value: function _disposeItems(items) {\n      items.forEach(function (item) {\n        item.dispose();\n      });\n    }\n    /**\n     * Updates the visible item count.\n     * @private\n     */\n  }, {\n    key: \"_updateItemCount\",\n    value: function _updateItemCount() {\n      this.visibleItems = this._getFilteredItems().length;\n    }\n    /**\n     * Sets css transform transition on a group of elements. This is not executed\n     * at the same time as `item.init` so that transitions don't occur upon\n     * initialization of a new Shuffle instance.\n     * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n     * @protected\n     */\n  }, {\n    key: \"setItemTransitions\",\n    value: function setItemTransitions(items) {\n      var _this$options = this.options,\n        speed = _this$options.speed,\n        easing = _this$options.easing;\n      var positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left']; // Allow users to transtion other properties if they exist in the `before`\n      // css mapping of the shuffle item.\n\n      var cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map(function (k) {\n        return hyphenate(k);\n      });\n      var properties = positionProps.concat(cssProps).join();\n      items.forEach(function (item) {\n        item.element.style.transitionDuration = speed + 'ms';\n        item.element.style.transitionTimingFunction = easing;\n        item.element.style.transitionProperty = properties;\n      });\n    }\n  }, {\n    key: \"_getItems\",\n    value: function _getItems() {\n      var _this3 = this;\n      return Array.from(this.element.children).filter(function (el) {\n        return matchesSelector(el, _this3.options.itemSelector);\n      }).map(function (el) {\n        return new ShuffleItem(el, _this3.options.isRTL);\n      });\n    }\n    /**\n     * Combine the current items array with a new one and sort it by DOM order.\n     * @param {ShuffleItem[]} items Items to track.\n     * @return {ShuffleItem[]}\n     */\n  }, {\n    key: \"_mergeNewItems\",\n    value: function _mergeNewItems(items) {\n      var children = Array.from(this.element.children);\n      return sorter(this.items.concat(items), {\n        by: function by(element) {\n          return children.indexOf(element);\n        }\n      });\n    }\n  }, {\n    key: \"_getFilteredItems\",\n    value: function _getFilteredItems() {\n      return this.items.filter(function (item) {\n        return item.isVisible;\n      });\n    }\n  }, {\n    key: \"_getConcealedItems\",\n    value: function _getConcealedItems() {\n      return this.items.filter(function (item) {\n        return !item.isVisible;\n      });\n    }\n    /**\n     * Returns the column size, based on column width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @param {number} gutterSize Size of the gutters.\n     * @return {number}\n     * @private\n     */\n  }, {\n    key: \"_getColumnSize\",\n    value: function _getColumnSize(containerWidth, gutterSize) {\n      var size; // If the columnWidth property is a function, then the grid is fluid\n\n      if (typeof this.options.columnWidth === 'function') {\n        size = this.options.columnWidth(containerWidth); // columnWidth option isn't a function, are they using a sizing element?\n      } else if (this.options.sizer) {\n        size = Shuffle.getSize(this.options.sizer).width; // if not, how about the explicitly set option?\n      } else if (this.options.columnWidth) {\n        size = this.options.columnWidth; // or use the size of the first item\n      } else if (this.items.length > 0) {\n        size = Shuffle.getSize(this.items[0].element, true).width; // if there's no items, use size of container\n      } else {\n        size = containerWidth;\n      } // Don't let them set a column width of zero.\n\n      if (size === 0) {\n        size = containerWidth;\n      }\n      return size + gutterSize;\n    }\n    /**\n     * Returns the gutter size, based on gutter width and sizer options.\n     * @param {number} containerWidth Size of the parent container.\n     * @return {number}\n     * @private\n     */\n  }, {\n    key: \"_getGutterSize\",\n    value: function _getGutterSize(containerWidth) {\n      var size;\n      if (typeof this.options.gutterWidth === 'function') {\n        size = this.options.gutterWidth(containerWidth);\n      } else if (this.options.sizer) {\n        size = getNumberStyle(this.options.sizer, 'marginLeft');\n      } else {\n        size = this.options.gutterWidth;\n      }\n      return size;\n    }\n    /**\n     * Calculate the number of columns to be used. Gets css if using sizer element.\n     * @param {number} [containerWidth] Optionally specify a container width if\n     *    it's already available.\n     */\n  }, {\n    key: \"_setColumns\",\n    value: function _setColumns() {\n      var containerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Shuffle.getSize(this.element).width;\n      var gutter = this._getGutterSize(containerWidth);\n      var columnWidth = this._getColumnSize(containerWidth, gutter);\n      var calculatedColumns = (containerWidth + gutter) / columnWidth; // Widths given from getStyles are not precise enough...\n\n      if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n        // e.g. calculatedColumns = 11.998876\n        calculatedColumns = Math.round(calculatedColumns);\n      }\n      this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n      this.containerWidth = containerWidth;\n      this.colWidth = columnWidth;\n    }\n    /**\n     * Adjust the height of the grid\n     */\n  }, {\n    key: \"_setContainerSize\",\n    value: function _setContainerSize() {\n      this.element.style.height = this._getContainerSize() + 'px';\n    }\n    /**\n     * Based on the column heights, it returns the biggest one.\n     * @return {number}\n     * @private\n     */\n  }, {\n    key: \"_getContainerSize\",\n    value: function _getContainerSize() {\n      return arrayMax(this.positions);\n    }\n    /**\n     * Get the clamped stagger amount.\n     * @param {number} index Index of the item to be staggered.\n     * @return {number}\n     */\n  }, {\n    key: \"_getStaggerAmount\",\n    value: function _getStaggerAmount(index) {\n      return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n    }\n    /**\n     * Emit an event from this instance.\n     * @param {string} name Event name.\n     * @param {Object} [data={}] Optional object data.\n     */\n  }, {\n    key: \"_dispatch\",\n    value: function _dispatch(name) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this.isDestroyed) {\n        return;\n      }\n      data.shuffle = this;\n      this.emit(name, data);\n    }\n    /**\n     * Zeros out the y columns array, which is used to determine item placement.\n     * @private\n     */\n  }, {\n    key: \"_resetCols\",\n    value: function _resetCols() {\n      var i = this.cols;\n      this.positions = [];\n      while (i) {\n        i -= 1;\n        this.positions.push(0);\n      }\n    }\n    /**\n     * Loops through each item that should be shown and calculates the x, y position.\n     * @param {ShuffleItem[]} items Array of items that will be shown/layed\n     *     out in order in their array.\n     */\n  }, {\n    key: \"_layout\",\n    value: function _layout(items) {\n      var _this4 = this;\n      var itemPositions = this._getNextPositions(items);\n      var count = 0;\n      items.forEach(function (item, i) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.VISIBLE.after);\n        } // If the item will not change its position, do not add it to the render\n        // queue. Transitions don't fire when setting a property to the same value.\n\n        if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n          item.applyCss(ShuffleItem.Css.VISIBLE.before);\n          callback();\n          return;\n        }\n        item.point = itemPositions[i];\n        item.scale = ShuffleItem.Scale.VISIBLE;\n        item.isHidden = false; // Clone the object so that the `before` object isn't modified when the\n        // transition delay is added.\n\n        var styles = _this4.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n        styles.transitionDelay = _this4._getStaggerAmount(count) + 'ms';\n        _this4._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n        count += 1;\n      });\n    }\n    /**\n     * Return an array of Point instances representing the future positions of\n     * each item.\n     * @param {ShuffleItem[]} items Array of sorted shuffle items.\n     * @return {Point[]}\n     * @private\n     */\n  }, {\n    key: \"_getNextPositions\",\n    value: function _getNextPositions(items) {\n      var _this5 = this;\n\n      // If position data is going to be changed, add the item's size to the\n      // transformer to allow for calculations.\n      if (this.options.isCentered) {\n        var itemsData = items.map(function (item, i) {\n          var itemSize = Shuffle.getSize(item.element, true);\n          var point = _this5._getItemPosition(itemSize);\n          return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n        });\n        return this.getTransformedPositions(itemsData, this.containerWidth);\n      } // If no transforms are going to happen, simply return an array of the\n      // future points of each item.\n\n      return items.map(function (item) {\n        return _this5._getItemPosition(Shuffle.getSize(item.element, true));\n      });\n    }\n    /**\n     * Determine the location of the next item, based on its size.\n     * @param {{width: number, height: number}} itemSize Object with width and height.\n     * @return {Point}\n     * @private\n     */\n  }, {\n    key: \"_getItemPosition\",\n    value: function _getItemPosition(itemSize) {\n      return getItemPosition({\n        itemSize: itemSize,\n        positions: this.positions,\n        gridSize: this.colWidth,\n        total: this.cols,\n        threshold: this.options.columnThreshold,\n        buffer: this.options.buffer\n      });\n    }\n    /**\n     * Mutate positions before they're applied.\n     * @param {Rect[]} itemRects Item data objects.\n     * @param {number} containerWidth Width of the containing element.\n     * @return {Point[]}\n     * @protected\n     */\n  }, {\n    key: \"getTransformedPositions\",\n    value: function getTransformedPositions(itemRects, containerWidth) {\n      return getCenteredPositions(itemRects, containerWidth);\n    }\n    /**\n     * Hides the elements that don't match our filter.\n     * @param {ShuffleItem[]} collection Collection to shrink.\n     * @private\n     */\n  }, {\n    key: \"_shrink\",\n    value: function _shrink() {\n      var _this6 = this;\n      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._getConcealedItems();\n      var count = 0;\n      collection.forEach(function (item) {\n        function callback() {\n          item.applyCss(ShuffleItem.Css.HIDDEN.after);\n        } // Continuing would add a transitionend event listener to the element, but\n        // that listener would not execute because the transform and opacity would\n        // stay the same.\n        // The callback is executed here because it is not guaranteed to be called\n        // after the transitionend event because the transitionend could be\n        // canceled if another animation starts.\n\n        if (item.isHidden) {\n          item.applyCss(ShuffleItem.Css.HIDDEN.before);\n          callback();\n          return;\n        }\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n        var styles = _this6.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n        styles.transitionDelay = _this6._getStaggerAmount(count) + 'ms';\n        _this6._queue.push({\n          item: item,\n          styles: styles,\n          callback: callback\n        });\n        count += 1;\n      });\n    }\n    /**\n     * Resize handler.\n     * @private\n     */\n  }, {\n    key: \"_handleResize\",\n    value: function _handleResize() {\n      // If shuffle is disabled, destroyed, don't do anything\n      if (!this.isEnabled || this.isDestroyed) {\n        return;\n      }\n      this.update();\n    }\n    /**\n     * Returns styles which will be applied to the an item for a transition.\n     * @param {ShuffleItem} item Item to get styles for. Should have updated\n     *   scale and point properties.\n     * @param {Object} styleObject Extra styles that will be used in the transition.\n     * @return {!Object} Transforms for transitions, left/top for animate.\n     * @protected\n     */\n  }, {\n    key: \"getStylesForTransition\",\n    value: function getStylesForTransition(item, styleObject) {\n      // Clone the object to avoid mutating the original.\n      // eslint-disable-next-line prefer-object-spread\n      var styles = Object.assign({}, styleObject);\n      if (this.options.useTransforms) {\n        var sign = this.options.isRTL ? '-' : '';\n        var x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n        var y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n        styles.transform = \"translate(\".concat(sign).concat(x, \"px, \").concat(y, \"px) scale(\").concat(item.scale, \")\");\n      } else {\n        if (this.options.isRTL) {\n          styles.right = item.point.x + 'px';\n        } else {\n          styles.left = item.point.x + 'px';\n        }\n        styles.top = item.point.y + 'px';\n      }\n      return styles;\n    }\n    /**\n     * Listen for the transition end on an element and execute the itemCallback\n     * when it finishes.\n     * @param {Element} element Element to listen on.\n     * @param {function} itemCallback Callback for the item.\n     * @param {function} done Callback to notify `parallel` that this one is done.\n     */\n  }, {\n    key: \"_whenTransitionDone\",\n    value: function _whenTransitionDone(element, itemCallback, done) {\n      var id = onTransitionEnd(element, function (evt) {\n        itemCallback();\n        done(null, evt);\n      });\n      this._transitions.push(id);\n    }\n    /**\n     * Return a function which will set CSS styles and call the `done` function\n     * when (if) the transition finishes.\n     * @param {Object} opts Transition object.\n     * @return {function} A function to be called with a `done` function.\n     */\n  }, {\n    key: \"_getTransitionFunction\",\n    value: function _getTransitionFunction(opts) {\n      var _this7 = this;\n      return function (done) {\n        opts.item.applyCss(opts.styles);\n        _this7._whenTransitionDone(opts.item.element, opts.callback, done);\n      };\n    }\n    /**\n     * Execute the styles gathered in the style queue. This applies styles to elements,\n     * triggering transitions.\n     * @private\n     */\n  }, {\n    key: \"_processQueue\",\n    value: function _processQueue() {\n      if (this.isTransitioning) {\n        this._cancelMovement();\n      }\n      var hasSpeed = this.options.speed > 0;\n      var hasQueue = this._queue.length > 0;\n      if (hasQueue && hasSpeed && this.isInitialized) {\n        this._startTransitions(this._queue);\n      } else if (hasQueue) {\n        this._styleImmediately(this._queue);\n        this._dispatch(Shuffle.EventType.LAYOUT); // A call to layout happened, but none of the newly visible items will\n        // change position or the transition duration is zero, which will not trigger\n        // the transitionend event.\n      } else {\n        this._dispatch(Shuffle.EventType.LAYOUT);\n      } // Remove everything in the style queue\n\n      this._queue.length = 0;\n    }\n    /**\n     * Wait for each transition to finish, the emit the layout event.\n     * @param {Object[]} transitions Array of transition objects.\n     */\n  }, {\n    key: \"_startTransitions\",\n    value: function _startTransitions(transitions) {\n      var _this8 = this;\n\n      // Set flag that shuffle is currently in motion.\n      this.isTransitioning = true; // Create an array of functions to be called.\n\n      var callbacks = transitions.map(function (obj) {\n        return _this8._getTransitionFunction(obj);\n      });\n      arrayParallel(callbacks, this._movementFinished.bind(this));\n    }\n  }, {\n    key: \"_cancelMovement\",\n    value: function _cancelMovement() {\n      // Remove the transition end event for each listener.\n      this._transitions.forEach(cancelTransitionEnd); // Reset the array.\n\n      this._transitions.length = 0; // Show it's no longer active.\n\n      this.isTransitioning = false;\n    }\n    /**\n     * Apply styles without a transition.\n     * @param {Object[]} objects Array of transition objects.\n     * @private\n     */\n  }, {\n    key: \"_styleImmediately\",\n    value: function _styleImmediately(objects) {\n      if (objects.length) {\n        var elements = objects.map(function (obj) {\n          return obj.item.element;\n        });\n        Shuffle._skipTransitions(elements, function () {\n          objects.forEach(function (obj) {\n            obj.item.applyCss(obj.styles);\n            obj.callback();\n          });\n        });\n      }\n    }\n  }, {\n    key: \"_movementFinished\",\n    value: function _movementFinished() {\n      this._transitions.length = 0;\n      this.isTransitioning = false;\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n    /**\n     * The magic. This is what makes the plugin 'shuffle'\n     * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n     *     Can be a function, string, or array of strings.\n     * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n     */\n  }, {\n    key: \"filter\",\n    value: function filter(category, sortOptions) {\n      if (!this.isEnabled) {\n        return;\n      }\n      if (!category || category && category.length === 0) {\n        category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n      }\n\n      this._filter(category); // Shrink each hidden item\n\n      this._shrink(); // How many visible elements?\n\n      this._updateItemCount(); // Update transforms on visible elements so they will animate to their new positions.\n\n      this.sort(sortOptions);\n    }\n    /**\n     * Gets the visible elements, sorts them, and passes them to layout.\n     * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n     */\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      var sortOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.lastSort;\n      if (!this.isEnabled) {\n        return;\n      }\n      this._resetCols();\n      var items = sorter(this._getFilteredItems(), sortOptions);\n      this.sortedItems = items;\n      this._layout(items); // `_layout` always happens after `_shrink`, so it's safe to process the style\n      // queue here with styles from the shrink method.\n\n      this._processQueue(); // Adjust the height of the container.\n\n      this._setContainerSize();\n      this.lastSort = sortOptions;\n    }\n    /**\n     * Reposition everything.\n     * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n     */\n  }, {\n    key: \"update\",\n    value: function update() {\n      var isOnlyLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.isEnabled) {\n        if (!isOnlyLayout) {\n          // Get updated colCount\n          this._setColumns();\n        } // Layout items\n\n        this.sort();\n      }\n    }\n    /**\n     * Use this instead of `update()` if you don't need the columns and gutters updated\n     * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n     * could be off.\n     */\n  }, {\n    key: \"layout\",\n    value: function layout() {\n      this.update(true);\n    }\n    /**\n     * New items have been appended to shuffle. Mix them in with the current\n     * filter or sort status.\n     * @param {Element[]} newItems Collection of new items.\n     */\n  }, {\n    key: \"add\",\n    value: function add(newItems) {\n      var _this9 = this;\n      var items = arrayUnique(newItems).map(function (el) {\n        return new ShuffleItem(el, _this9.options.isRTL);\n      }); // Add classes and set initial positions.\n\n      this._initItems(items); // Determine which items will go with the current filter.\n\n      this._resetCols();\n      var allItems = this._mergeNewItems(items);\n      var sortedItems = sorter(allItems, this.lastSort);\n      var allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n      var isNewItem = function isNewItem(item) {\n        return items.includes(item);\n      };\n      var applyHiddenState = function applyHiddenState(item) {\n        item.scale = ShuffleItem.Scale.HIDDEN;\n        item.isHidden = true;\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }; // Layout all items again so that new items get positions.\n      // Synchonously apply positions.\n\n      var itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n      allSortedItemsSet.visible.forEach(function (item, i) {\n        if (isNewItem(item)) {\n          item.point = itemPositions[i];\n          applyHiddenState(item);\n          item.applyCss(_this9.getStylesForTransition(item, {}));\n        }\n      });\n      allSortedItemsSet.hidden.forEach(function (item) {\n        if (isNewItem(item)) {\n          applyHiddenState(item);\n        }\n      }); // Cause layout so that the styles above are applied.\n\n      this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n      // Add transition to each item.\n\n      this.setItemTransitions(items); // Update the list of items.\n\n      this.items = this._mergeNewItems(items); // Update layout/visibility of new and old items.\n\n      this.filter(this.lastFilter);\n    }\n    /**\n     * Disables shuffle from updating dimensions and layout on resize\n     */\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.isEnabled = false;\n    }\n    /**\n     * Enables shuffle again\n     * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n     */\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var isUpdateLayout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.isEnabled = true;\n      if (isUpdateLayout) {\n        this.update();\n      }\n    }\n    /**\n     * Remove 1 or more shuffle items.\n     * @param {Element[]} elements An array containing one or more\n     *     elements in shuffle\n     * @return {Shuffle} The shuffle instance.\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(elements) {\n      var _this10 = this;\n      if (!elements.length) {\n        return;\n      }\n      var collection = arrayUnique(elements);\n      var oldItems = collection.map(function (element) {\n        return _this10.getItemByElement(element);\n      }).filter(function (item) {\n        return !!item;\n      });\n      var handleLayout = function handleLayout() {\n        _this10._disposeItems(oldItems); // Remove the collection in the callback\n\n        collection.forEach(function (element) {\n          element.parentNode.removeChild(element);\n        });\n        _this10._dispatch(Shuffle.EventType.REMOVED, {\n          collection: collection\n        });\n      }; // Hide collection first.\n\n      this._toggleFilterClasses({\n        visible: [],\n        hidden: oldItems\n      });\n      this._shrink(oldItems);\n      this.sort(); // Update the list of items here because `remove` could be called again\n      // with an item that is in the process of being removed.\n\n      this.items = this.items.filter(function (item) {\n        return !oldItems.includes(item);\n      });\n      this._updateItemCount();\n      this.once(Shuffle.EventType.LAYOUT, handleLayout);\n    }\n    /**\n     * Retrieve a shuffle item by its element.\n     * @param {Element} element Element to look for.\n     * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n     */\n  }, {\n    key: \"getItemByElement\",\n    value: function getItemByElement(element) {\n      return this.items.find(function (item) {\n        return item.element === element;\n      });\n    }\n    /**\n     * Dump the elements currently stored and reinitialize all child elements which\n     * match the `itemSelector`.\n     */\n  }, {\n    key: \"resetItems\",\n    value: function resetItems() {\n      var _this11 = this;\n\n      // Remove refs to current items.\n      this._disposeItems(this.items);\n      this.isInitialized = false; // Find new items in the DOM.\n\n      this.items = this._getItems(); // Set initial styles on the new items.\n\n      this._initItems(this.items);\n      this.once(Shuffle.EventType.LAYOUT, function () {\n        // Add transition to each item.\n        _this11.setItemTransitions(_this11.items);\n        _this11.isInitialized = true;\n      }); // Lay out all items.\n\n      this.filter(this.lastFilter);\n    }\n    /**\n     * Destroys shuffle, removes events, styles, and classes\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._cancelMovement();\n      window.removeEventListener('resize', this._onResize); // Reset container styles\n\n      this.element.classList.remove('shuffle');\n      this.element.removeAttribute('style'); // Reset individual item styles\n\n      this._disposeItems(this.items);\n      this.items.length = 0;\n      this._transitions.length = 0; // Null DOM references\n\n      this.options.sizer = null;\n      this.element = null; // Set a flag so if a debounced resize has been triggered,\n      // it can first check if it is actually isDestroyed and not doing anything\n\n      this.isDestroyed = true;\n      this.isEnabled = false;\n    }\n    /**\n     * Returns the outer width of an element, optionally including its margins.\n     *\n     * There are a few different methods for getting the width of an element, none of\n     * which work perfectly for all Shuffle's use cases.\n     *\n     * 1. getBoundingClientRect() `left` and `right` properties.\n     *   - Accounts for transform scaled elements, making it useless for Shuffle\n     *   elements which have shrunk.\n     * 2. The `offsetWidth` property.\n     *   - This value stays the same regardless of the elements transform property,\n     *   however, it does not return subpixel values.\n     * 3. getComputedStyle()\n     *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n     *   padding and border when box-sizing: border-box is set, requiring a feature\n     *   test and extra work to add the padding back for IE and other browsers which\n     *   follow the W3C spec here.\n     *\n     * @param {Element} element The element.\n     * @param {boolean} [includeMargins=false] Whether to include margins.\n     * @return {{width: number, height: number}} The width and height.\n     */\n  }], [{\n    key: \"getSize\",\n    value: function getSize(element) {\n      var includeMargins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // Store the styles so that they can be used by others without asking for it again.\n      var styles = window.getComputedStyle(element, null);\n      var width = getNumberStyle(element, 'width', styles);\n      var height = getNumberStyle(element, 'height', styles);\n      if (includeMargins) {\n        var marginLeft = getNumberStyle(element, 'marginLeft', styles);\n        var marginRight = getNumberStyle(element, 'marginRight', styles);\n        var marginTop = getNumberStyle(element, 'marginTop', styles);\n        var marginBottom = getNumberStyle(element, 'marginBottom', styles);\n        width += marginLeft + marginRight;\n        height += marginTop + marginBottom;\n      }\n      return {\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Change a property or execute a function which will not have a transition\n     * @param {Element[]} elements DOM elements that won't be transitioned.\n     * @param {function} callback A function which will be called while transition\n     *     is set to 0ms.\n     * @private\n     */\n  }, {\n    key: \"_skipTransitions\",\n    value: function _skipTransitions(elements, callback) {\n      var zero = '0ms'; // Save current duration and delay.\n\n      var data = elements.map(function (element) {\n        var style = element.style;\n        var duration = style.transitionDuration;\n        var delay = style.transitionDelay; // Set the duration to zero so it happens immediately\n\n        style.transitionDuration = zero;\n        style.transitionDelay = zero;\n        return {\n          duration: duration,\n          delay: delay\n        };\n      });\n      callback(); // Cause forced synchronous layout.\n\n      elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n      // Put the duration back\n\n      elements.forEach(function (element, i) {\n        element.style.transitionDuration = data[i].duration;\n        element.style.transitionDelay = data[i].delay;\n      });\n    }\n  }]);\n  return Shuffle;\n}(TinyEmitter);\nShuffle.ShuffleItem = ShuffleItem;\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n/** @enum {string} */\n\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed'\n};\n/** @enum {string} */\n\nShuffle.Classes = Classes;\n/** @enum {string} */\n\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all'\n}; // Overrideable options\n\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle: throttleit,\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n  // Attempt to center grid items in each row.\n  isCentered: false,\n  // Attempt to align grid items to right.\n  isRTL: false,\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true\n};\nShuffle.Point = Point;\nShuffle.Rect = Rect; // Expose for testing. Hack at your own risk.\n\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\nexport default Shuffle;","map":{"version":3,"names":["E","prototype","on","name","callback","ctx","e","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","call","evtArr","i","len","length","evts","liveEvents","tinyEmitter","exports","proto","Element","vendor","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","match","el","selector","nodeType","nodes","parentNode","querySelectorAll","throttleit","throttle","func","wait","args","rtn","timeoutID","last","throttled","delta","Date","setTimeout","arrayParallel","parallel","fns","context","noop","pending","finished","results","Array","forEach","maybeDone","err","result","getNumber","value","parseFloat","Point","x","y","_classCallCheck","equals","a","b","Rect","w","h","id","left","top","width","height","intersects","Classes","BASE","SHUFFLE_ITEM","VISIBLE","HIDDEN","id$1","ShuffleItem","element","isRTL","isVisible","isHidden","show","classList","remove","add","removeAttribute","hide","setAttribute","init","addClasses","applyCss","Css","INITIAL","DIRECTION","rtl","ltr","scale","Scale","point","classes","_this","className","removeClasses","_this2","obj","_this3","Object","keys","key","style","dispose","position","visibility","willChange","right","before","opacity","after","transitionDelay","testComputedSize","document","body","documentElement","createElement","cssText","appendChild","_window$getComputedSt","window","getComputedStyle","Math","round","removeChild","getNumberStyle","styles","undefined","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","randomize","array","n","floor","random","temp","defaults","reverse","by","compare","sorter","arr","options","opts","assign","original","from","revert","sort","valA","valB","transitions","eventName","count","uniqueId","cancelTransitionEnd","removeEventListener","onTransitionEnd","evt","currentTarget","target","addEventListener","arrayMax","max","arrayMin","min","getColumnSpan","itemWidth","columnWidth","columns","threshold","columnSpan","abs","ceil","getAvailablePositions","positions","available","getShortColumn","buffer","minPosition","getItemPosition","_ref","itemSize","gridSize","total","span","setY","shortColumnIndex","setHeight","getCenteredPositions","itemRects","containerWidth","rowMap","itemRect","rects","rows","centeredRows","lastItem","end","offset","finalRects","canMove","newRects","every","r","newRect","noOverlap","some","intersectingRect","hasOverlap","rowIndex","findIndex","items","includes","splice","concat","map","hyphenate","str","replace","m1","toLowerCase","arrayUnique","Set","Shuffle","_TinyEmitter","_super","delimeter","delimiter","lastSort","group","ALL_ITEMS","lastFilter","isEnabled","isDestroyed","isInitialized","_transitions","isTransitioning","_queue","_getElementOption","TypeError","_init","_getItems","sortedItems","sizer","_initItems","_onResize","_getResizeFunction","readyState","layout","bind","onLoad","containerCss","getSize","_validateStyles","_setColumns","filter","initialSort","offsetWidth","setItemTransitions","transition","speed","easing","resizeFunction","_handleResize","throttleTime","option","querySelector","jquery","overflow","_filter","category","collection","set","_getFilteredSets","_toggleFilterClasses","visible","hidden","item","_doesPassFilter","attr","getAttribute","FILTER_ATTRIBUTE_KEY","split","JSON","parse","testCategory","isArray","filterMode","FilterMode","ANY","_disposeItems","_updateItemCount","visibleItems","_getFilteredItems","_this$options","positionProps","useTransforms","cssProps","k","properties","join","transitionDuration","transitionTimingFunction","transitionProperty","children","itemSelector","_mergeNewItems","indexOf","_getConcealedItems","_getColumnSize","gutterSize","size","_getGutterSize","gutterWidth","gutter","calculatedColumns","columnThreshold","cols","colWidth","_setContainerSize","_getContainerSize","_getStaggerAmount","index","staggerAmount","staggerAmountMax","_dispatch","shuffle","_resetCols","_layout","_this4","itemPositions","_getNextPositions","getStylesForTransition","_this5","isCentered","itemsData","_getItemPosition","getTransformedPositions","_shrink","_this6","update","styleObject","sign","roundTransforms","transform","_whenTransitionDone","itemCallback","done","_getTransitionFunction","_this7","_processQueue","_cancelMovement","hasSpeed","hasQueue","_startTransitions","_styleImmediately","EventType","LAYOUT","_this8","callbacks","_movementFinished","objects","elements","_skipTransitions","sortOptions","isOnlyLayout","newItems","_this9","allItems","allSortedItemsSet","isNewItem","applyHiddenState","disable","enable","isUpdateLayout","_this10","oldItems","getItemByElement","handleLayout","REMOVED","find","resetItems","_this11","destroy","includeMargins","marginLeft","marginRight","marginTop","marginBottom","zero","duration","delay","TinyEmitter","ALL","__sorter","__getColumnSpan","__getAvailablePositions","__getShortColumn","__getCenteredPositions"],"sources":["/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/node_modules/tiny-emitter/index.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/node_modules/matches-selector/index.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/node_modules/throttleit/index.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/node_modules/array-parallel/index.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/get-number.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/point.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/rect.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/classes.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/shuffle-item.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/computed-size.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/get-number-style.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/sorter.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/on-transition-end.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/array-max.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/array-min.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/layout.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/hyphenate.js","/Users/guadalupeabrile/Documents/4. Gestion de Proyectos/Ash Phicology Webpage/Scoda-react/node_modules/shufflejs/src/shuffle.js"],"sourcesContent":["function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","'use strict';\n\nvar proto = typeof Element !== 'undefined' ? Element.prototype : {};\nvar vendor = proto.matches\n  || proto.matchesSelector\n  || proto.webkitMatchesSelector\n  || proto.mozMatchesSelector\n  || proto.msMatchesSelector\n  || proto.oMatchesSelector;\n\nmodule.exports = match;\n\n/**\n * Match `el` to `selector`.\n *\n * @param {Element} el\n * @param {String} selector\n * @return {Boolean}\n * @api public\n */\n\nfunction match(el, selector) {\n  if (!el || el.nodeType !== 1) return false;\n  if (vendor) return vendor.call(el, selector);\n  var nodes = el.parentNode.querySelectorAll(selector);\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] == el) return true;\n  }\n  return false;\n}\n","module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","module.exports = function parallel(fns, context, callback) {\n  if (!callback) {\n    if (typeof context === 'function') {\n      callback = context\n      context = null\n    } else {\n      callback = noop\n    }\n  }\n\n  var pending = fns && fns.length\n  if (!pending) return callback(null, []);\n\n  var finished = false\n  var results = new Array(pending)\n\n  fns.forEach(context ? function (fn, i) {\n    fn.call(context, maybeDone(i))\n  } : function (fn, i) {\n    fn(maybeDone(i))\n  })\n\n  function maybeDone(i) {\n    return function (err, result) {\n      if (finished) return;\n\n      if (err) {\n        callback(err, results)\n        finished = true\n        return\n      }\n\n      results[i] = result\n\n      if (!--pending) callback(null, results);\n    }\n  }\n}\n\nfunction noop() {}\n","/**\n * Always returns a numeric value, given a value. Logic from jQuery's `isNumeric`.\n * @param {*} value Possibly numeric value.\n * @return {number} `value` or zero if `value` isn't numeric.\n */\nexport default function getNumber(value) {\n  return parseFloat(value) || 0;\n}\n","import getNumber from './get-number';\n\nclass Point {\n  /**\n   * Represents a coordinate pair.\n   * @param {number} [x=0] X.\n   * @param {number} [y=0] Y.\n   */\n  constructor(x, y) {\n    this.x = getNumber(x);\n    this.y = getNumber(y);\n  }\n\n  /**\n   * Whether two points are equal.\n   * @param {Point} a Point A.\n   * @param {Point} b Point B.\n   * @return {boolean}\n   */\n  static equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n  }\n}\n\nexport default Point;\n","export default class Rect {\n  /**\n   * Class for representing rectangular regions.\n   * https://github.com/google/closure-library/blob/master/closure/goog/math/rect.js\n   * @param {number} x Left.\n   * @param {number} y Top.\n   * @param {number} w Width.\n   * @param {number} h Height.\n   * @param {number} id Identifier\n   * @constructor\n   */\n  constructor(x, y, w, h, id) {\n    this.id = id;\n\n    /** @type {number} */\n    this.left = x;\n\n    /** @type {number} */\n    this.top = y;\n\n    /** @type {number} */\n    this.width = w;\n\n    /** @type {number} */\n    this.height = h;\n  }\n\n  /**\n   * Returns whether two rectangles intersect.\n   * @param {Rect} a A Rectangle.\n   * @param {Rect} b A Rectangle.\n   * @return {boolean} Whether a and b intersect.\n   */\n  static intersects(a, b) {\n    return (\n      a.left < b.left + b.width && b.left < a.left + a.width\n      && a.top < b.top + b.height && b.top < a.top + a.height);\n  }\n}\n","export default {\n  BASE: 'shuffle',\n  SHUFFLE_ITEM: 'shuffle-item',\n  VISIBLE: 'shuffle-item--visible',\n  HIDDEN: 'shuffle-item--hidden',\n};\n","import Point from './point';\nimport Classes from './classes';\n\nlet id = 0;\n\nclass ShuffleItem {\n  constructor(element, isRTL) {\n    id += 1;\n    this.id = id;\n    this.element = element;\n\n    /**\n     * Set correct direction of item\n     */\n    this.isRTL = isRTL;\n\n    /**\n     * Used to separate items for layout and shrink.\n     */\n    this.isVisible = true;\n\n    /**\n     * Used to determine if a transition will happen. By the time the _layout\n     * and _shrink methods get the ShuffleItem instances, the `isVisible` value\n     * has already been changed by the separation methods, so this property is\n     * needed to know if the item was visible/hidden before the shrink/layout.\n     */\n    this.isHidden = false;\n  }\n\n  show() {\n    this.isVisible = true;\n    this.element.classList.remove(Classes.HIDDEN);\n    this.element.classList.add(Classes.VISIBLE);\n    this.element.removeAttribute('aria-hidden');\n  }\n\n  hide() {\n    this.isVisible = false;\n    this.element.classList.remove(Classes.VISIBLE);\n    this.element.classList.add(Classes.HIDDEN);\n    this.element.setAttribute('aria-hidden', true);\n  }\n\n  init() {\n    this.addClasses([Classes.SHUFFLE_ITEM, Classes.VISIBLE]);\n    this.applyCss(ShuffleItem.Css.INITIAL);\n    this.applyCss(this.isRTL ? ShuffleItem.Css.DIRECTION.rtl : ShuffleItem.Css.DIRECTION.ltr);\n    this.scale = ShuffleItem.Scale.VISIBLE;\n    this.point = new Point();\n  }\n\n  addClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.add(className);\n    });\n  }\n\n  removeClasses(classes) {\n    classes.forEach((className) => {\n      this.element.classList.remove(className);\n    });\n  }\n\n  applyCss(obj) {\n    Object.keys(obj).forEach((key) => {\n      this.element.style[key] = obj[key];\n    });\n  }\n\n  dispose() {\n    this.removeClasses([\n      Classes.HIDDEN,\n      Classes.VISIBLE,\n      Classes.SHUFFLE_ITEM,\n    ]);\n\n    this.element.removeAttribute('style');\n    this.element = null;\n  }\n}\n\nShuffleItem.Css = {\n  INITIAL: {\n    position: 'absolute',\n    top: 0,\n    visibility: 'visible',\n    willChange: 'transform',\n  },\n  DIRECTION: {\n    ltr: {\n      left: 0,\n    },\n    rtl: {\n      right: 0,\n    },\n  },\n  VISIBLE: {\n    before: {\n      opacity: 1,\n      visibility: 'visible',\n    },\n    after: {\n      transitionDelay: '',\n    },\n  },\n  HIDDEN: {\n    before: {\n      opacity: 0,\n    },\n    after: {\n      visibility: 'hidden',\n      transitionDelay: '',\n    },\n  },\n};\n\nShuffleItem.Scale = {\n  VISIBLE: 1,\n  HIDDEN: 0.001,\n};\n\nexport default ShuffleItem;\n","import getNumber from './get-number';\n\nlet value = null;\nexport default () => {\n  if (value !== null) {\n    return value;\n  }\n\n  const element = document.body || document.documentElement;\n  const e = document.createElement('div');\n  e.style.cssText = 'width:10px;padding:2px;box-sizing:border-box;';\n  element.appendChild(e);\n\n  const { width } = window.getComputedStyle(e, null);\n  // Fix for issue #314\n  value = Math.round(getNumber(width)) === 10;\n\n  element.removeChild(e);\n\n  return value;\n};\n","import getNumber from './get-number';\nimport testComputedSize from './computed-size';\n\n/**\n * Retrieve the computed style for an element, parsed as a float.\n * @param {Element} element Element to get style for.\n * @param {string} style Style property.\n * @param {CSSStyleDeclaration} [styles] Optionally include clean styles to\n *     use instead of asking for them again.\n * @return {number} The parsed computed value or zero if that fails because IE\n *     will return 'auto' when the element doesn't have margins instead of\n *     the computed style.\n */\nexport default function getNumberStyle(\n  element, style,\n  styles = window.getComputedStyle(element, null),\n) {\n  let value = getNumber(styles[style]);\n\n  // Support IE<=11 and W3C spec.\n  if (!testComputedSize() && style === 'width') {\n    value += getNumber(styles.paddingLeft)\n      + getNumber(styles.paddingRight)\n      + getNumber(styles.borderLeftWidth)\n      + getNumber(styles.borderRightWidth);\n  } else if (!testComputedSize() && style === 'height') {\n    value += getNumber(styles.paddingTop)\n      + getNumber(styles.paddingBottom)\n      + getNumber(styles.borderTopWidth)\n      + getNumber(styles.borderBottomWidth);\n  }\n\n  return value;\n}\n","/**\n * Fisher-Yates shuffle.\n * http://stackoverflow.com/a/962890/373422\n * https://bost.ocks.org/mike/shuffle/\n * @param {Array} array Array to shuffle.\n * @return {Array} Randomly sorted array.\n */\nfunction randomize(array) {\n  let n = array.length;\n\n  while (n) {\n    n -= 1;\n    const i = Math.floor(Math.random() * (n + 1));\n    const temp = array[i];\n    array[i] = array[n];\n    array[n] = temp;\n  }\n\n  return array;\n}\n\nconst defaults = {\n  // Use array.reverse() to reverse the results\n  reverse: false,\n\n  // Sorting function\n  by: null,\n\n  // Custom sort function\n  compare: null,\n\n  // If true, this will skip the sorting and return a randomized order in the array\n  randomize: false,\n\n  // Determines which property of each item in the array is passed to the\n  // sorting method.\n  key: 'element',\n};\n\n/**\n * You can return `undefined` from the `by` function to revert to DOM order.\n * @param {Array<T>} arr Array to sort.\n * @param {SortOptions} options Sorting options.\n * @return {Array<T>}\n */\nexport default function sorter(arr, options) {\n  // eslint-disable-next-line prefer-object-spread\n  const opts = Object.assign({}, defaults, options);\n  const original = Array.from(arr);\n  let revert = false;\n\n  if (!arr.length) {\n    return [];\n  }\n\n  if (opts.randomize) {\n    return randomize(arr);\n  }\n\n  // Sort the elements by the opts.by function.\n  // If we don't have opts.by, default to DOM order\n  if (typeof opts.by === 'function') {\n    arr.sort((a, b) => {\n      // Exit early if we already know we want to revert\n      if (revert) {\n        return 0;\n      }\n\n      const valA = opts.by(a[opts.key]);\n      const valB = opts.by(b[opts.key]);\n\n      // If both values are undefined, use the DOM order\n      if (valA === undefined && valB === undefined) {\n        revert = true;\n        return 0;\n      }\n\n      if (valA < valB || valA === 'sortFirst' || valB === 'sortLast') {\n        return -1;\n      }\n\n      if (valA > valB || valA === 'sortLast' || valB === 'sortFirst') {\n        return 1;\n      }\n\n      return 0;\n    });\n  } else if (typeof opts.compare === 'function') {\n    arr.sort(opts.compare);\n  }\n\n  // Revert to the original array if necessary\n  if (revert) {\n    return original;\n  }\n\n  if (opts.reverse) {\n    arr.reverse();\n  }\n\n  return arr;\n}\n","const transitions = {};\nconst eventName = 'transitionend';\nlet count = 0;\n\nfunction uniqueId() {\n  count += 1;\n  return eventName + count;\n}\n\nexport function cancelTransitionEnd(id) {\n  if (transitions[id]) {\n    transitions[id].element.removeEventListener(eventName, transitions[id].listener);\n    transitions[id] = null;\n    return true;\n  }\n\n  return false;\n}\n\nexport function onTransitionEnd(element, callback) {\n  const id = uniqueId();\n  const listener = (evt) => {\n    if (evt.currentTarget === evt.target) {\n      cancelTransitionEnd(id);\n      callback(evt);\n    }\n  };\n\n  element.addEventListener(eventName, listener);\n\n  transitions[id] = { element, listener };\n\n  return id;\n}\n","export default function arrayMax(array) {\n  return Math.max.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","export default function arrayMin(array) {\n  return Math.min.apply(Math, array); // eslint-disable-line prefer-spread\n}\n","import Point from './point';\nimport Rect from './rect';\nimport arrayMax from './array-max';\nimport arrayMin from './array-min';\n\n/**\n * Determine the number of columns an items spans.\n * @param {number} itemWidth Width of the item.\n * @param {number} columnWidth Width of the column (includes gutter).\n * @param {number} columns Total number of columns\n * @param {number} threshold A buffer value for the size of the column to fit.\n * @return {number}\n */\nexport function getColumnSpan(itemWidth, columnWidth, columns, threshold) {\n  let columnSpan = itemWidth / columnWidth;\n\n  // If the difference between the rounded column span number and the\n  // calculated column span number is really small, round the number to\n  // make it fit.\n  if (Math.abs(Math.round(columnSpan) - columnSpan) < threshold) {\n    // e.g. columnSpan = 4.0089945390298745\n    columnSpan = Math.round(columnSpan);\n  }\n\n  // Ensure the column span is not more than the amount of columns in the whole layout.\n  return Math.min(Math.ceil(columnSpan), columns);\n}\n\n/**\n * Retrieves the column set to use for placement.\n * @param {number} columnSpan The number of columns this current item spans.\n * @param {number} columns The total columns in the grid.\n * @return {Array.<number>} An array of numbers represeting the column set.\n */\nexport function getAvailablePositions(positions, columnSpan, columns) {\n  // The item spans only one column.\n  if (columnSpan === 1) {\n    return positions;\n  }\n\n  // The item spans more than one column, figure out how many different\n  // places it could fit horizontally.\n  // The group count is the number of places within the positions this block\n  // could fit, ignoring the current positions of items.\n  // Imagine a 2 column brick as the second item in a 4 column grid with\n  // 10px height each. Find the places it would fit:\n  // [20, 10, 10, 0]\n  //  |   |   |\n  //  *   *   *\n  //\n  // Then take the places which fit and get the bigger of the two:\n  // max([20, 10]), max([10, 10]), max([10, 0]) = [20, 10, 10]\n  //\n  // Next, find the first smallest number (the short column).\n  // [20, 10, 10]\n  //      |\n  //      *\n  //\n  // And that's where it should be placed!\n  //\n  // Another example where the second column's item extends past the first:\n  // [10, 20, 10, 0] => [20, 20, 10] => 10\n  const available = [];\n\n  // For how many possible positions for this item there are.\n  for (let i = 0; i <= columns - columnSpan; i++) {\n    // Find the bigger value for each place it could fit.\n    available.push(arrayMax(positions.slice(i, i + columnSpan)));\n  }\n\n  return available;\n}\n\n/**\n * Find index of short column, the first from the left where this item will go.\n *\n * @param {Array.<number>} positions The array to search for the smallest number.\n * @param {number} buffer Optional buffer which is very useful when the height\n *     is a percentage of the width.\n * @return {number} Index of the short column.\n */\nexport function getShortColumn(positions, buffer) {\n  const minPosition = arrayMin(positions);\n  for (let i = 0, len = positions.length; i < len; i++) {\n    if (positions[i] >= minPosition - buffer && positions[i] <= minPosition + buffer) {\n      return i;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Determine the location of the next item, based on its size.\n * @param {Object} itemSize Object with width and height.\n * @param {Array.<number>} positions Positions of the other current items.\n * @param {number} gridSize The column width or row height.\n * @param {number} total The total number of columns or rows.\n * @param {number} threshold Buffer value for the column to fit.\n * @param {number} buffer Vertical buffer for the height of items.\n * @return {Point}\n */\nexport function getItemPosition({\n  itemSize, positions, gridSize, total, threshold, buffer,\n}) {\n  const span = getColumnSpan(itemSize.width, gridSize, total, threshold);\n  const setY = getAvailablePositions(positions, span, total);\n  const shortColumnIndex = getShortColumn(setY, buffer);\n\n  // Position the item\n  const point = new Point(gridSize * shortColumnIndex, setY[shortColumnIndex]);\n\n  // Update the columns array with the new values for each column.\n  // e.g. before the update the columns could be [250, 0, 0, 0] for an item\n  // which spans 2 columns. After it would be [250, itemHeight, itemHeight, 0].\n  const setHeight = setY[shortColumnIndex] + itemSize.height;\n  for (let i = 0; i < span; i++) {\n    positions[shortColumnIndex + i] = setHeight;\n  }\n\n  return point;\n}\n\n/**\n * This method attempts to center items. This method could potentially be slow\n * with a large number of items because it must place items, then check every\n * previous item to ensure there is no overlap.\n * @param {Array.<Rect>} itemRects Item data objects.\n * @param {number} containerWidth Width of the containing element.\n * @return {Array.<Point>}\n */\nexport function getCenteredPositions(itemRects, containerWidth) {\n  const rowMap = {};\n\n  // Populate rows by their offset because items could jump between rows like:\n  // a   c\n  //  bbb\n  itemRects.forEach((itemRect) => {\n    if (rowMap[itemRect.top]) {\n      // Push the point to the last row array.\n      rowMap[itemRect.top].push(itemRect);\n    } else {\n      // Start of a new row.\n      rowMap[itemRect.top] = [itemRect];\n    }\n  });\n\n  // For each row, find the end of the last item, then calculate\n  // the remaining space by dividing it by 2. Then add that\n  // offset to the x position of each point.\n  let rects = [];\n  const rows = [];\n  const centeredRows = [];\n  Object.keys(rowMap).forEach((key) => {\n    const itemRects = rowMap[key];\n    rows.push(itemRects);\n    const lastItem = itemRects[itemRects.length - 1];\n    const end = lastItem.left + lastItem.width;\n    const offset = Math.round((containerWidth - end) / 2);\n\n    let finalRects = itemRects;\n    let canMove = false;\n    if (offset > 0) {\n      const newRects = [];\n      canMove = itemRects.every((r) => {\n        const newRect = new Rect(r.left + offset, r.top, r.width, r.height, r.id);\n\n        // Check all current rects to make sure none overlap.\n        const noOverlap = !rects.some((r) => Rect.intersects(newRect, r));\n\n        newRects.push(newRect);\n        return noOverlap;\n      });\n\n      // If none of the rectangles overlapped, the whole group can be centered.\n      if (canMove) {\n        finalRects = newRects;\n      }\n    }\n\n    // If the items are not going to be offset, ensure that the original\n    // placement for this row will not overlap previous rows (row-spanning\n    // elements could be in the way).\n    if (!canMove) {\n      let intersectingRect;\n      const hasOverlap = itemRects.some((itemRect) => rects.some((r) => {\n        const intersects = Rect.intersects(itemRect, r);\n        if (intersects) {\n          intersectingRect = r;\n        }\n        return intersects;\n      }));\n\n      // If there is any overlap, replace the overlapping row with the original.\n      if (hasOverlap) {\n        const rowIndex = centeredRows.findIndex((items) => items.includes(intersectingRect));\n        centeredRows.splice(rowIndex, 1, rows[rowIndex]);\n      }\n    }\n\n    rects = rects.concat(finalRects);\n    centeredRows.push(finalRects);\n  });\n\n  // Reduce array of arrays to a single array of points.\n  // https://stackoverflow.com/a/10865042/373422\n  // Then reset sort back to how the items were passed to this method.\n  // Remove the wrapper object with index, map to a Point.\n  return [].concat.apply([], centeredRows) // eslint-disable-line prefer-spread\n    .sort((a, b) => (a.id - b.id))\n    .map((itemRect) => new Point(itemRect.left, itemRect.top));\n}\n","/**\n * Hyphenates a javascript style string to a css one. For example:\n * MozBoxSizing -> -moz-box-sizing.\n * @param {string} str The string to hyphenate.\n * @return {string} The hyphenated string.\n */\nexport default function hyphenate(str) {\n  return str.replace(/([A-Z])/g, (str, m1) => `-${m1.toLowerCase()}`);\n}\n","import TinyEmitter from 'tiny-emitter';\nimport matches from 'matches-selector';\nimport throttle from 'throttleit';\nimport parallel from 'array-parallel';\n\nimport Point from './point';\nimport Rect from './rect';\nimport ShuffleItem from './shuffle-item';\nimport Classes from './classes';\nimport getNumberStyle from './get-number-style';\nimport sorter from './sorter';\nimport { onTransitionEnd, cancelTransitionEnd } from './on-transition-end';\nimport {\n  getItemPosition,\n  getColumnSpan,\n  getAvailablePositions,\n  getShortColumn,\n  getCenteredPositions,\n} from './layout';\nimport arrayMax from './array-max';\nimport hyphenate from './hyphenate';\n\nfunction arrayUnique(x) {\n  return Array.from(new Set(x));\n}\n\n// Used for unique instance variables\nlet id = 0;\n\nclass Shuffle extends TinyEmitter {\n  /**\n   * Categorize, sort, and filter a responsive grid of items.\n   *\n   * @param {Element} element An element which is the parent container for the grid items.\n   * @param {Object} [options=Shuffle.options] Options object.\n   * @constructor\n   */\n  constructor(element, options = {}) {\n    super();\n    // eslint-disable-next-line prefer-object-spread\n    this.options = Object.assign({}, Shuffle.options, options);\n\n    // Allow misspelling of delimiter since that's how it used to be.\n    // Remove in v6.\n    if (this.options.delimeter) {\n      this.options.delimiter = this.options.delimeter;\n    }\n\n    this.lastSort = {};\n    this.group = Shuffle.ALL_ITEMS;\n    this.lastFilter = Shuffle.ALL_ITEMS;\n    this.isEnabled = true;\n    this.isDestroyed = false;\n    this.isInitialized = false;\n    this._transitions = [];\n    this.isTransitioning = false;\n    this._queue = [];\n\n    const el = this._getElementOption(element);\n\n    if (!el) {\n      throw new TypeError('Shuffle needs to be initialized with an element.');\n    }\n\n    this.element = el;\n    this.id = 'shuffle_' + id;\n    id += 1;\n\n    this._init();\n    this.isInitialized = true;\n  }\n\n  _init() {\n    this.items = this._getItems();\n    this.sortedItems = this.items;\n\n    this.options.sizer = this._getElementOption(this.options.sizer);\n\n    // Add class and invalidate styles\n    this.element.classList.add(Shuffle.Classes.BASE);\n\n    // Set initial css for each item\n    this._initItems(this.items);\n\n    // Bind resize events\n    this._onResize = this._getResizeFunction();\n    window.addEventListener('resize', this._onResize);\n\n    // If the page has not already emitted the `load` event, call layout on load.\n    // This avoids layout issues caused by images and fonts loading after the\n    // instance has been initialized.\n    if (document.readyState !== 'complete') {\n      const layout = this.layout.bind(this);\n      window.addEventListener('load', function onLoad() {\n        window.removeEventListener('load', onLoad);\n        layout();\n      });\n    }\n\n    // Get container css all in one request. Causes reflow\n    const containerCss = window.getComputedStyle(this.element, null);\n    const containerWidth = Shuffle.getSize(this.element).width;\n\n    // Add styles to the container if it doesn't have them.\n    this._validateStyles(containerCss);\n\n    // We already got the container's width above, no need to cause another\n    // reflow getting it again... Calculate the number of columns there will be\n    this._setColumns(containerWidth);\n\n    // Kick off!\n    this.filter(this.options.group, this.options.initialSort);\n\n    // The shuffle items haven't had transitions set on them yet so the user\n    // doesn't see the first layout. Set them now that the first layout is done.\n    // First, however, a synchronous layout must be caused for the previous\n    // styles to be applied without transitions.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n    this.setItemTransitions(this.items);\n    this.element.style.transition = `height ${this.options.speed}ms ${this.options.easing}`;\n  }\n\n  /**\n   * Returns a throttled and proxied function for the resize handler.\n   * @return {function}\n   * @private\n   */\n  _getResizeFunction() {\n    const resizeFunction = this._handleResize.bind(this);\n    return this.options.throttle\n      ? this.options.throttle(resizeFunction, this.options.throttleTime)\n      : resizeFunction;\n  }\n\n  /**\n   * Retrieve an element from an option.\n   * @param {string|jQuery|Element} option The option to check.\n   * @return {?Element} The plain element or null.\n   * @private\n   */\n  _getElementOption(option) {\n    // If column width is a string, treat is as a selector and search for the\n    // sizer element within the outermost container\n    if (typeof option === 'string') {\n      return this.element.querySelector(option);\n    }\n\n    // Check for an element\n    if (option && option.nodeType && option.nodeType === 1) {\n      return option;\n    }\n\n    // Check for jQuery object\n    if (option && option.jquery) {\n      return option[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Ensures the shuffle container has the css styles it needs applied to it.\n   * @param {Object} styles Key value pairs for position and overflow.\n   * @private\n   */\n  _validateStyles(styles) {\n    // Position cannot be static.\n    if (styles.position === 'static') {\n      this.element.style.position = 'relative';\n    }\n\n    // Overflow has to be hidden.\n    if (styles.overflow !== 'hidden') {\n      this.element.style.overflow = 'hidden';\n    }\n  }\n\n  /**\n   * Filter the elements by a category.\n   * @param {string|string[]|function(Element):boolean} [category] Category to\n   *     filter by. If it's given, the last category will be used to filter the items.\n   * @param {Array} [collection] Optionally filter a collection. Defaults to\n   *     all the items.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _filter(category = this.lastFilter, collection = this.items) {\n    const set = this._getFilteredSets(category, collection);\n\n    // Individually add/remove hidden/visible classes\n    this._toggleFilterClasses(set);\n\n    // Save the last filter in case elements are appended.\n    this.lastFilter = category;\n\n    // This is saved mainly because providing a filter function (like searching)\n    // will overwrite the `lastFilter` property every time its called.\n    if (typeof category === 'string') {\n      this.group = category;\n    }\n\n    return set;\n  }\n\n  /**\n   * Returns an object containing the visible and hidden elements.\n   * @param {string|string[]|function(Element):boolean} category Category or function to filter by.\n   * @param {ShuffleItem[]} items A collection of items to filter.\n   * @return {{visible: ShuffleItem[], hidden: ShuffleItem[]}}\n   * @private\n   */\n  _getFilteredSets(category, items) {\n    let visible = [];\n    const hidden = [];\n\n    // category === 'all', add visible class to everything\n    if (category === Shuffle.ALL_ITEMS) {\n      visible = items;\n\n      // Loop through each item and use provided function to determine\n      // whether to hide it or not.\n    } else {\n      items.forEach((item) => {\n        if (this._doesPassFilter(category, item.element)) {\n          visible.push(item);\n        } else {\n          hidden.push(item);\n        }\n      });\n    }\n\n    return {\n      visible,\n      hidden,\n    };\n  }\n\n  /**\n   * Test an item to see if it passes a category.\n   * @param {string|string[]|function():boolean} category Category or function to filter by.\n   * @param {Element} element An element to test.\n   * @return {boolean} Whether it passes the category/filter.\n   * @private\n   */\n  _doesPassFilter(category, element) {\n    if (typeof category === 'function') {\n      return category.call(element, element, this);\n    }\n\n    // Check each element's data-groups attribute against the given category.\n    const attr = element.getAttribute('data-' + Shuffle.FILTER_ATTRIBUTE_KEY);\n    const keys = this.options.delimiter\n      ? attr.split(this.options.delimiter)\n      : JSON.parse(attr);\n\n    function testCategory(category) {\n      return keys.includes(category);\n    }\n\n    if (Array.isArray(category)) {\n      if (this.options.filterMode === Shuffle.FilterMode.ANY) {\n        return category.some(testCategory);\n      }\n      return category.every(testCategory);\n    }\n\n    return keys.includes(category);\n  }\n\n  /**\n   * Toggles the visible and hidden class names.\n   * @param {{visible, hidden}} Object with visible and hidden arrays.\n   * @private\n   */\n  _toggleFilterClasses({ visible, hidden }) {\n    visible.forEach((item) => {\n      item.show();\n    });\n\n    hidden.forEach((item) => {\n      item.hide();\n    });\n  }\n\n  /**\n   * Set the initial css for each item\n   * @param {ShuffleItem[]} items Set to initialize.\n   * @private\n   */\n  _initItems(items) {\n    items.forEach((item) => {\n      item.init();\n    });\n  }\n\n  /**\n   * Remove element reference and styles.\n   * @param {ShuffleItem[]} items Set to dispose.\n   * @private\n   */\n  _disposeItems(items) {\n    items.forEach((item) => {\n      item.dispose();\n    });\n  }\n\n  /**\n   * Updates the visible item count.\n   * @private\n   */\n  _updateItemCount() {\n    this.visibleItems = this._getFilteredItems().length;\n  }\n\n  /**\n   * Sets css transform transition on a group of elements. This is not executed\n   * at the same time as `item.init` so that transitions don't occur upon\n   * initialization of a new Shuffle instance.\n   * @param {ShuffleItem[]} items Shuffle items to set transitions on.\n   * @protected\n   */\n  setItemTransitions(items) {\n    const { speed, easing } = this.options;\n    const positionProps = this.options.useTransforms ? ['transform'] : ['top', 'left'];\n\n    // Allow users to transtion other properties if they exist in the `before`\n    // css mapping of the shuffle item.\n    const cssProps = Object.keys(ShuffleItem.Css.HIDDEN.before).map((k) => hyphenate(k));\n    const properties = positionProps.concat(cssProps).join();\n\n    items.forEach((item) => {\n      item.element.style.transitionDuration = speed + 'ms';\n      item.element.style.transitionTimingFunction = easing;\n      item.element.style.transitionProperty = properties;\n    });\n  }\n\n  _getItems() {\n    return Array.from(this.element.children)\n      .filter((el) => matches(el, this.options.itemSelector))\n      .map((el) => new ShuffleItem(el, this.options.isRTL));\n  }\n\n  /**\n   * Combine the current items array with a new one and sort it by DOM order.\n   * @param {ShuffleItem[]} items Items to track.\n   * @return {ShuffleItem[]}\n   */\n  _mergeNewItems(items) {\n    const children = Array.from(this.element.children);\n    return sorter(this.items.concat(items), {\n      by(element) {\n        return children.indexOf(element);\n      },\n    });\n  }\n\n  _getFilteredItems() {\n    return this.items.filter((item) => item.isVisible);\n  }\n\n  _getConcealedItems() {\n    return this.items.filter((item) => !item.isVisible);\n  }\n\n  /**\n   * Returns the column size, based on column width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @param {number} gutterSize Size of the gutters.\n   * @return {number}\n   * @private\n   */\n  _getColumnSize(containerWidth, gutterSize) {\n    let size;\n\n    // If the columnWidth property is a function, then the grid is fluid\n    if (typeof this.options.columnWidth === 'function') {\n      size = this.options.columnWidth(containerWidth);\n\n      // columnWidth option isn't a function, are they using a sizing element?\n    } else if (this.options.sizer) {\n      size = Shuffle.getSize(this.options.sizer).width;\n\n      // if not, how about the explicitly set option?\n    } else if (this.options.columnWidth) {\n      size = this.options.columnWidth;\n\n      // or use the size of the first item\n    } else if (this.items.length > 0) {\n      size = Shuffle.getSize(this.items[0].element, true).width;\n\n      // if there's no items, use size of container\n    } else {\n      size = containerWidth;\n    }\n\n    // Don't let them set a column width of zero.\n    if (size === 0) {\n      size = containerWidth;\n    }\n\n    return size + gutterSize;\n  }\n\n  /**\n   * Returns the gutter size, based on gutter width and sizer options.\n   * @param {number} containerWidth Size of the parent container.\n   * @return {number}\n   * @private\n   */\n  _getGutterSize(containerWidth) {\n    let size;\n    if (typeof this.options.gutterWidth === 'function') {\n      size = this.options.gutterWidth(containerWidth);\n    } else if (this.options.sizer) {\n      size = getNumberStyle(this.options.sizer, 'marginLeft');\n    } else {\n      size = this.options.gutterWidth;\n    }\n\n    return size;\n  }\n\n  /**\n   * Calculate the number of columns to be used. Gets css if using sizer element.\n   * @param {number} [containerWidth] Optionally specify a container width if\n   *    it's already available.\n   */\n  _setColumns(containerWidth = Shuffle.getSize(this.element).width) {\n    const gutter = this._getGutterSize(containerWidth);\n    const columnWidth = this._getColumnSize(containerWidth, gutter);\n    let calculatedColumns = (containerWidth + gutter) / columnWidth;\n\n    // Widths given from getStyles are not precise enough...\n    if (Math.abs(Math.round(calculatedColumns) - calculatedColumns) < this.options.columnThreshold) {\n      // e.g. calculatedColumns = 11.998876\n      calculatedColumns = Math.round(calculatedColumns);\n    }\n\n    this.cols = Math.max(Math.floor(calculatedColumns || 0), 1);\n    this.containerWidth = containerWidth;\n    this.colWidth = columnWidth;\n  }\n\n  /**\n   * Adjust the height of the grid\n   */\n  _setContainerSize() {\n    this.element.style.height = this._getContainerSize() + 'px';\n  }\n\n  /**\n   * Based on the column heights, it returns the biggest one.\n   * @return {number}\n   * @private\n   */\n  _getContainerSize() {\n    return arrayMax(this.positions);\n  }\n\n  /**\n   * Get the clamped stagger amount.\n   * @param {number} index Index of the item to be staggered.\n   * @return {number}\n   */\n  _getStaggerAmount(index) {\n    return Math.min(index * this.options.staggerAmount, this.options.staggerAmountMax);\n  }\n\n  /**\n   * Emit an event from this instance.\n   * @param {string} name Event name.\n   * @param {Object} [data={}] Optional object data.\n   */\n  _dispatch(name, data = {}) {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    data.shuffle = this;\n    this.emit(name, data);\n  }\n\n  /**\n   * Zeros out the y columns array, which is used to determine item placement.\n   * @private\n   */\n  _resetCols() {\n    let i = this.cols;\n    this.positions = [];\n    while (i) {\n      i -= 1;\n      this.positions.push(0);\n    }\n  }\n\n  /**\n   * Loops through each item that should be shown and calculates the x, y position.\n   * @param {ShuffleItem[]} items Array of items that will be shown/layed\n   *     out in order in their array.\n   */\n  _layout(items) {\n    const itemPositions = this._getNextPositions(items);\n\n    let count = 0;\n    items.forEach((item, i) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.VISIBLE.after);\n      }\n\n      // If the item will not change its position, do not add it to the render\n      // queue. Transitions don't fire when setting a property to the same value.\n      if (Point.equals(item.point, itemPositions[i]) && !item.isHidden) {\n        item.applyCss(ShuffleItem.Css.VISIBLE.before);\n        callback();\n        return;\n      }\n\n      item.point = itemPositions[i];\n      item.scale = ShuffleItem.Scale.VISIBLE;\n      item.isHidden = false;\n\n      // Clone the object so that the `before` object isn't modified when the\n      // transition delay is added.\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.VISIBLE.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Return an array of Point instances representing the future positions of\n   * each item.\n   * @param {ShuffleItem[]} items Array of sorted shuffle items.\n   * @return {Point[]}\n   * @private\n   */\n  _getNextPositions(items) {\n    // If position data is going to be changed, add the item's size to the\n    // transformer to allow for calculations.\n    if (this.options.isCentered) {\n      const itemsData = items.map((item, i) => {\n        const itemSize = Shuffle.getSize(item.element, true);\n        const point = this._getItemPosition(itemSize);\n        return new Rect(point.x, point.y, itemSize.width, itemSize.height, i);\n      });\n\n      return this.getTransformedPositions(itemsData, this.containerWidth);\n    }\n\n    // If no transforms are going to happen, simply return an array of the\n    // future points of each item.\n    return items.map((item) => this._getItemPosition(Shuffle.getSize(item.element, true)));\n  }\n\n  /**\n   * Determine the location of the next item, based on its size.\n   * @param {{width: number, height: number}} itemSize Object with width and height.\n   * @return {Point}\n   * @private\n   */\n  _getItemPosition(itemSize) {\n    return getItemPosition({\n      itemSize,\n      positions: this.positions,\n      gridSize: this.colWidth,\n      total: this.cols,\n      threshold: this.options.columnThreshold,\n      buffer: this.options.buffer,\n    });\n  }\n\n  /**\n   * Mutate positions before they're applied.\n   * @param {Rect[]} itemRects Item data objects.\n   * @param {number} containerWidth Width of the containing element.\n   * @return {Point[]}\n   * @protected\n   */\n  getTransformedPositions(itemRects, containerWidth) {\n    return getCenteredPositions(itemRects, containerWidth);\n  }\n\n  /**\n   * Hides the elements that don't match our filter.\n   * @param {ShuffleItem[]} collection Collection to shrink.\n   * @private\n   */\n  _shrink(collection = this._getConcealedItems()) {\n    let count = 0;\n    collection.forEach((item) => {\n      function callback() {\n        item.applyCss(ShuffleItem.Css.HIDDEN.after);\n      }\n\n      // Continuing would add a transitionend event listener to the element, but\n      // that listener would not execute because the transform and opacity would\n      // stay the same.\n      // The callback is executed here because it is not guaranteed to be called\n      // after the transitionend event because the transitionend could be\n      // canceled if another animation starts.\n      if (item.isHidden) {\n        item.applyCss(ShuffleItem.Css.HIDDEN.before);\n        callback();\n        return;\n      }\n\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n\n      const styles = this.getStylesForTransition(item, ShuffleItem.Css.HIDDEN.before);\n      styles.transitionDelay = this._getStaggerAmount(count) + 'ms';\n\n      this._queue.push({\n        item,\n        styles,\n        callback,\n      });\n\n      count += 1;\n    });\n  }\n\n  /**\n   * Resize handler.\n   * @private\n   */\n  _handleResize() {\n    // If shuffle is disabled, destroyed, don't do anything\n    if (!this.isEnabled || this.isDestroyed) {\n      return;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Returns styles which will be applied to the an item for a transition.\n   * @param {ShuffleItem} item Item to get styles for. Should have updated\n   *   scale and point properties.\n   * @param {Object} styleObject Extra styles that will be used in the transition.\n   * @return {!Object} Transforms for transitions, left/top for animate.\n   * @protected\n   */\n  getStylesForTransition(item, styleObject) {\n    // Clone the object to avoid mutating the original.\n    // eslint-disable-next-line prefer-object-spread\n    const styles = Object.assign({}, styleObject);\n\n    if (this.options.useTransforms) {\n      const sign = this.options.isRTL ? '-' : '';\n      const x = this.options.roundTransforms ? Math.round(item.point.x) : item.point.x;\n      const y = this.options.roundTransforms ? Math.round(item.point.y) : item.point.y;\n      styles.transform = `translate(${sign}${x}px, ${y}px) scale(${item.scale})`;\n    } else {\n      if (this.options.isRTL) {\n        styles.right = item.point.x + 'px';\n      } else {\n        styles.left = item.point.x + 'px';\n      }\n      styles.top = item.point.y + 'px';\n    }\n\n    return styles;\n  }\n\n  /**\n   * Listen for the transition end on an element and execute the itemCallback\n   * when it finishes.\n   * @param {Element} element Element to listen on.\n   * @param {function} itemCallback Callback for the item.\n   * @param {function} done Callback to notify `parallel` that this one is done.\n   */\n  _whenTransitionDone(element, itemCallback, done) {\n    const id = onTransitionEnd(element, (evt) => {\n      itemCallback();\n      done(null, evt);\n    });\n\n    this._transitions.push(id);\n  }\n\n  /**\n   * Return a function which will set CSS styles and call the `done` function\n   * when (if) the transition finishes.\n   * @param {Object} opts Transition object.\n   * @return {function} A function to be called with a `done` function.\n   */\n  _getTransitionFunction(opts) {\n    return (done) => {\n      opts.item.applyCss(opts.styles);\n      this._whenTransitionDone(opts.item.element, opts.callback, done);\n    };\n  }\n\n  /**\n   * Execute the styles gathered in the style queue. This applies styles to elements,\n   * triggering transitions.\n   * @private\n   */\n  _processQueue() {\n    if (this.isTransitioning) {\n      this._cancelMovement();\n    }\n\n    const hasSpeed = this.options.speed > 0;\n    const hasQueue = this._queue.length > 0;\n\n    if (hasQueue && hasSpeed && this.isInitialized) {\n      this._startTransitions(this._queue);\n    } else if (hasQueue) {\n      this._styleImmediately(this._queue);\n      this._dispatch(Shuffle.EventType.LAYOUT);\n\n      // A call to layout happened, but none of the newly visible items will\n      // change position or the transition duration is zero, which will not trigger\n      // the transitionend event.\n    } else {\n      this._dispatch(Shuffle.EventType.LAYOUT);\n    }\n\n    // Remove everything in the style queue\n    this._queue.length = 0;\n  }\n\n  /**\n   * Wait for each transition to finish, the emit the layout event.\n   * @param {Object[]} transitions Array of transition objects.\n   */\n  _startTransitions(transitions) {\n    // Set flag that shuffle is currently in motion.\n    this.isTransitioning = true;\n\n    // Create an array of functions to be called.\n    const callbacks = transitions.map((obj) => this._getTransitionFunction(obj));\n\n    parallel(callbacks, this._movementFinished.bind(this));\n  }\n\n  _cancelMovement() {\n    // Remove the transition end event for each listener.\n    this._transitions.forEach(cancelTransitionEnd);\n\n    // Reset the array.\n    this._transitions.length = 0;\n\n    // Show it's no longer active.\n    this.isTransitioning = false;\n  }\n\n  /**\n   * Apply styles without a transition.\n   * @param {Object[]} objects Array of transition objects.\n   * @private\n   */\n  _styleImmediately(objects) {\n    if (objects.length) {\n      const elements = objects.map((obj) => obj.item.element);\n\n      Shuffle._skipTransitions(elements, () => {\n        objects.forEach((obj) => {\n          obj.item.applyCss(obj.styles);\n          obj.callback();\n        });\n      });\n    }\n  }\n\n  _movementFinished() {\n    this._transitions.length = 0;\n    this.isTransitioning = false;\n    this._dispatch(Shuffle.EventType.LAYOUT);\n  }\n\n  /**\n   * The magic. This is what makes the plugin 'shuffle'\n   * @param {string|string[]|function(Element):boolean} [category] Category to filter by.\n   *     Can be a function, string, or array of strings.\n   * @param {SortOptions} [sortOptions] A sort object which can sort the visible set\n   */\n  filter(category, sortOptions) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (!category || (category && category.length === 0)) {\n      category = Shuffle.ALL_ITEMS; // eslint-disable-line no-param-reassign\n    }\n\n    this._filter(category);\n\n    // Shrink each hidden item\n    this._shrink();\n\n    // How many visible elements?\n    this._updateItemCount();\n\n    // Update transforms on visible elements so they will animate to their new positions.\n    this.sort(sortOptions);\n  }\n\n  /**\n   * Gets the visible elements, sorts them, and passes them to layout.\n   * @param {SortOptions} [sortOptions] The options object to pass to `sorter`.\n   */\n  sort(sortOptions = this.lastSort) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    this._resetCols();\n\n    const items = sorter(this._getFilteredItems(), sortOptions);\n    this.sortedItems = items;\n\n    this._layout(items);\n\n    // `_layout` always happens after `_shrink`, so it's safe to process the style\n    // queue here with styles from the shrink method.\n    this._processQueue();\n\n    // Adjust the height of the container.\n    this._setContainerSize();\n\n    this.lastSort = sortOptions;\n  }\n\n  /**\n   * Reposition everything.\n   * @param {boolean} [isOnlyLayout=false] If true, column and gutter widths won't be recalculated.\n   */\n  update(isOnlyLayout = false) {\n    if (this.isEnabled) {\n      if (!isOnlyLayout) {\n        // Get updated colCount\n        this._setColumns();\n      }\n\n      // Layout items\n      this.sort();\n    }\n  }\n\n  /**\n   * Use this instead of `update()` if you don't need the columns and gutters updated\n   * Maybe an image inside `shuffle` loaded (and now has a height), which means calculations\n   * could be off.\n   */\n  layout() {\n    this.update(true);\n  }\n\n  /**\n   * New items have been appended to shuffle. Mix them in with the current\n   * filter or sort status.\n   * @param {Element[]} newItems Collection of new items.\n   */\n  add(newItems) {\n    const items = arrayUnique(newItems).map((el) => new ShuffleItem(el, this.options.isRTL));\n\n    // Add classes and set initial positions.\n    this._initItems(items);\n\n    // Determine which items will go with the current filter.\n    this._resetCols();\n\n    const allItems = this._mergeNewItems(items);\n    const sortedItems = sorter(allItems, this.lastSort);\n    const allSortedItemsSet = this._filter(this.lastFilter, sortedItems);\n\n    const isNewItem = (item) => items.includes(item);\n    const applyHiddenState = (item) => {\n      item.scale = ShuffleItem.Scale.HIDDEN;\n      item.isHidden = true;\n      item.applyCss(ShuffleItem.Css.HIDDEN.before);\n      item.applyCss(ShuffleItem.Css.HIDDEN.after);\n    };\n\n    // Layout all items again so that new items get positions.\n    // Synchonously apply positions.\n    const itemPositions = this._getNextPositions(allSortedItemsSet.visible);\n    allSortedItemsSet.visible.forEach((item, i) => {\n      if (isNewItem(item)) {\n        item.point = itemPositions[i];\n        applyHiddenState(item);\n        item.applyCss(this.getStylesForTransition(item, {}));\n      }\n    });\n\n    allSortedItemsSet.hidden.forEach((item) => {\n      if (isNewItem(item)) {\n        applyHiddenState(item);\n      }\n    });\n\n    // Cause layout so that the styles above are applied.\n    this.element.offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Add transition to each item.\n    this.setItemTransitions(items);\n\n    // Update the list of items.\n    this.items = this._mergeNewItems(items);\n\n    // Update layout/visibility of new and old items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Disables shuffle from updating dimensions and layout on resize\n   */\n  disable() {\n    this.isEnabled = false;\n  }\n\n  /**\n   * Enables shuffle again\n   * @param {boolean} [isUpdateLayout=true] if undefined, shuffle will update columns and gutters\n   */\n  enable(isUpdateLayout = true) {\n    this.isEnabled = true;\n    if (isUpdateLayout) {\n      this.update();\n    }\n  }\n\n  /**\n   * Remove 1 or more shuffle items.\n   * @param {Element[]} elements An array containing one or more\n   *     elements in shuffle\n   * @return {Shuffle} The shuffle instance.\n   */\n  remove(elements) {\n    if (!elements.length) {\n      return;\n    }\n\n    const collection = arrayUnique(elements);\n\n    const oldItems = collection\n      .map((element) => this.getItemByElement(element))\n      .filter((item) => !!item);\n\n    const handleLayout = () => {\n      this._disposeItems(oldItems);\n\n      // Remove the collection in the callback\n      collection.forEach((element) => {\n        element.parentNode.removeChild(element);\n      });\n\n      this._dispatch(Shuffle.EventType.REMOVED, { collection });\n    };\n\n    // Hide collection first.\n    this._toggleFilterClasses({\n      visible: [],\n      hidden: oldItems,\n    });\n\n    this._shrink(oldItems);\n\n    this.sort();\n\n    // Update the list of items here because `remove` could be called again\n    // with an item that is in the process of being removed.\n    this.items = this.items.filter((item) => !oldItems.includes(item));\n    this._updateItemCount();\n\n    this.once(Shuffle.EventType.LAYOUT, handleLayout);\n  }\n\n  /**\n   * Retrieve a shuffle item by its element.\n   * @param {Element} element Element to look for.\n   * @return {?ShuffleItem} A shuffle item or undefined if it's not found.\n   */\n  getItemByElement(element) {\n    return this.items.find((item) => item.element === element);\n  }\n\n  /**\n   * Dump the elements currently stored and reinitialize all child elements which\n   * match the `itemSelector`.\n   */\n  resetItems() {\n    // Remove refs to current items.\n    this._disposeItems(this.items);\n    this.isInitialized = false;\n\n    // Find new items in the DOM.\n    this.items = this._getItems();\n\n    // Set initial styles on the new items.\n    this._initItems(this.items);\n\n    this.once(Shuffle.EventType.LAYOUT, () => {\n      // Add transition to each item.\n      this.setItemTransitions(this.items);\n      this.isInitialized = true;\n    });\n\n    // Lay out all items.\n    this.filter(this.lastFilter);\n  }\n\n  /**\n   * Destroys shuffle, removes events, styles, and classes\n   */\n  destroy() {\n    this._cancelMovement();\n    window.removeEventListener('resize', this._onResize);\n\n    // Reset container styles\n    this.element.classList.remove('shuffle');\n    this.element.removeAttribute('style');\n\n    // Reset individual item styles\n    this._disposeItems(this.items);\n\n    this.items.length = 0;\n    this._transitions.length = 0;\n\n    // Null DOM references\n    this.options.sizer = null;\n    this.element = null;\n\n    // Set a flag so if a debounced resize has been triggered,\n    // it can first check if it is actually isDestroyed and not doing anything\n    this.isDestroyed = true;\n    this.isEnabled = false;\n  }\n\n  /**\n   * Returns the outer width of an element, optionally including its margins.\n   *\n   * There are a few different methods for getting the width of an element, none of\n   * which work perfectly for all Shuffle's use cases.\n   *\n   * 1. getBoundingClientRect() `left` and `right` properties.\n   *   - Accounts for transform scaled elements, making it useless for Shuffle\n   *   elements which have shrunk.\n   * 2. The `offsetWidth` property.\n   *   - This value stays the same regardless of the elements transform property,\n   *   however, it does not return subpixel values.\n   * 3. getComputedStyle()\n   *   - This works great Chrome, Firefox, Safari, but IE<=11 does not include\n   *   padding and border when box-sizing: border-box is set, requiring a feature\n   *   test and extra work to add the padding back for IE and other browsers which\n   *   follow the W3C spec here.\n   *\n   * @param {Element} element The element.\n   * @param {boolean} [includeMargins=false] Whether to include margins.\n   * @return {{width: number, height: number}} The width and height.\n   */\n  static getSize(element, includeMargins = false) {\n    // Store the styles so that they can be used by others without asking for it again.\n    const styles = window.getComputedStyle(element, null);\n    let width = getNumberStyle(element, 'width', styles);\n    let height = getNumberStyle(element, 'height', styles);\n\n    if (includeMargins) {\n      const marginLeft = getNumberStyle(element, 'marginLeft', styles);\n      const marginRight = getNumberStyle(element, 'marginRight', styles);\n      const marginTop = getNumberStyle(element, 'marginTop', styles);\n      const marginBottom = getNumberStyle(element, 'marginBottom', styles);\n      width += marginLeft + marginRight;\n      height += marginTop + marginBottom;\n    }\n\n    return {\n      width,\n      height,\n    };\n  }\n\n  /**\n   * Change a property or execute a function which will not have a transition\n   * @param {Element[]} elements DOM elements that won't be transitioned.\n   * @param {function} callback A function which will be called while transition\n   *     is set to 0ms.\n   * @private\n   */\n  static _skipTransitions(elements, callback) {\n    const zero = '0ms';\n\n    // Save current duration and delay.\n    const data = elements.map((element) => {\n      const { style } = element;\n      const duration = style.transitionDuration;\n      const delay = style.transitionDelay;\n\n      // Set the duration to zero so it happens immediately\n      style.transitionDuration = zero;\n      style.transitionDelay = zero;\n\n      return {\n        duration,\n        delay,\n      };\n    });\n\n    callback();\n\n    // Cause forced synchronous layout.\n    elements[0].offsetWidth; // eslint-disable-line no-unused-expressions\n\n    // Put the duration back\n    elements.forEach((element, i) => {\n      element.style.transitionDuration = data[i].duration;\n      element.style.transitionDelay = data[i].delay;\n    });\n  }\n}\n\nShuffle.ShuffleItem = ShuffleItem;\n\nShuffle.ALL_ITEMS = 'all';\nShuffle.FILTER_ATTRIBUTE_KEY = 'groups';\n\n/** @enum {string} */\nShuffle.EventType = {\n  LAYOUT: 'shuffle:layout',\n  REMOVED: 'shuffle:removed',\n};\n\n/** @enum {string} */\nShuffle.Classes = Classes;\n\n/** @enum {string} */\nShuffle.FilterMode = {\n  ANY: 'any',\n  ALL: 'all',\n};\n\n// Overrideable options\nShuffle.options = {\n  // Initial filter group.\n  group: Shuffle.ALL_ITEMS,\n\n  // Transition/animation speed (milliseconds).\n  speed: 250,\n\n  // CSS easing function to use.\n  easing: 'cubic-bezier(0.4, 0.0, 0.2, 1)',\n\n  // e.g. '.picture-item'.\n  itemSelector: '*',\n\n  // Element or selector string. Use an element to determine the size of columns\n  // and gutters.\n  sizer: null,\n\n  // A static number or function that tells the plugin how wide the gutters\n  // between columns are (in pixels).\n  gutterWidth: 0,\n\n  // A static number or function that returns a number which tells the plugin\n  // how wide the columns are (in pixels).\n  columnWidth: 0,\n\n  // If your group is not json, and is comma delimeted, you could set delimiter\n  // to ','.\n  delimiter: null,\n\n  // Useful for percentage based heights when they might not always be exactly\n  // the same (in pixels).\n  buffer: 0,\n\n  // Reading the width of elements isn't precise enough and can cause columns to\n  // jump between values.\n  columnThreshold: 0.01,\n\n  // Shuffle can be isInitialized with a sort object. It is the same object\n  // given to the sort method.\n  initialSort: null,\n\n  // By default, shuffle will throttle resize events. This can be changed or\n  // removed.\n  throttle,\n\n  // How often shuffle can be called on resize (in milliseconds).\n  throttleTime: 300,\n\n  // Transition delay offset for each item in milliseconds.\n  staggerAmount: 15,\n\n  // Maximum stagger delay in milliseconds.\n  staggerAmountMax: 150,\n\n  // Whether to use transforms or absolute positioning.\n  useTransforms: true,\n\n  // Affects using an array with filter. e.g. `filter(['one', 'two'])`. With \"any\",\n  // the element passes the test if any of its groups are in the array. With \"all\",\n  // the element only passes if all groups are in the array.\n  filterMode: Shuffle.FilterMode.ANY,\n\n  // Attempt to center grid items in each row.\n  isCentered: false,\n\n  // Attempt to align grid items to right.\n  isRTL: false,\n\n  // Whether to round pixel values used in translate(x, y). This usually avoids\n  // blurriness.\n  roundTransforms: true,\n};\n\nShuffle.Point = Point;\nShuffle.Rect = Rect;\n\n// Expose for testing. Hack at your own risk.\nShuffle.__sorter = sorter;\nShuffle.__getColumnSpan = getColumnSpan;\nShuffle.__getAvailablePositions = getAvailablePositions;\nShuffle.__getShortColumn = getShortColumn;\nShuffle.__getCenteredPositions = getCenteredPositions;\n\nexport default Shuffle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}